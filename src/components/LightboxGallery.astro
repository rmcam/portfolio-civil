---
import type { ProjectImage } from "../data/projects";

interface Props {
  projectImages: ProjectImage[];
  projectTitle: string;
  initialIndex?: number;
}

const { projectImages, projectTitle, initialIndex = 0 } = Astro.props;
---

<!--
  Componente LightboxGallery: Muestra una galería de imágenes en un modal lightbox.
  Permite navegar entre imágenes, ver miniaturas y cerrar el modal.
-->
<div id="lightbox-modal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black">
  <div class="relative w-full h-full flex flex-col lg:flex-row bg-black min-h-0">
    <!-- Botón para cerrar el lightbox -->
    <button id="lightbox-close-btn" class="absolute top-4 right-4 z-[60] text-white text-3xl font-bold p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-75 focus:outline-none focus:ring-2 focus:ring-white">
      &times;
    </button>
    <!-- Contenedor principal de la imagen y navegación del lightbox -->
    <div class="flex flex-col items-center justify-center w-full flex-grow min-h-0 min-w-0 overflow-hidden">
      <div class="relative w-full h-full flex items-center justify-center min-h-0 min-w-0 overflow-auto">
        <!-- Botón para navegar a la imagen anterior -->
        <button id="lightbox-prev-btn" class="absolute top-1/2 left-4 -translate-y-1/2 z-10 p-2 text-white text-4xl font-bold bg-black bg-opacity-50 rounded-full hover:bg-opacity-75 focus:outline-none focus:ring-2 focus:ring-white">
          &#10094; <!-- Flecha izquierda -->
        </button>
        <!-- Imagen principal del lightbox -->
        <img id="lightbox-img" src="" alt="Project Image" class="transition-transform duration-200 ease-out object-contain max-w-full max-h-full" loading="lazy"/>
        <!-- Botón para navegar a la imagen siguiente -->
        <button id="lightbox-next-btn" class="absolute top-1/2 right-4 -translate-y-1/2 z-10 p-2 text-white text-4xl font-bold bg-black bg-opacity-50 rounded-full hover:bg-opacity-75 focus:outline-none focus:ring-2 focus:ring-white">
          &#10095; <!-- Flecha derecha -->
        </button>
      </div>
      <!-- Pie de foto (caption) de la imagen actual -->
      <div id="lightbox-caption" class="w-full p-4 text-center text-white bg-black text-sm leading-relaxed max-h-40 overflow-y-auto whitespace-normal flex-shrink-0"></div>
    </div>
    <!-- Contenedor de miniaturas (thumbnails) de las imágenes del proyecto -->
    <div id="lightbox-thumbnails" class="w-full lg:w-64 p-4 bg-black bg-opacity-80 flex flex-row lg:flex-col items-center space-x-4 lg:space-x-0 lg:space-y-4 overflow-x-auto lg:overflow-y-auto">
      <!-- Las miniaturas se inyectarán aquí mediante JavaScript -->
    </div>
  </div>
</div>

<script is:inline define:vars={{ projectImages, projectTitle, initialIndex }}>
  document.addEventListener('DOMContentLoaded', () => {
    const lightbox = {
      modal: document.getElementById('lightbox-modal'),
      closeBtn: document.getElementById('lightbox-close-btn'),
      prevBtn: document.getElementById('lightbox-prev-btn'),
      nextBtn: document.getElementById('lightbox-next-btn'),
      imgContainer: null, // Referencia al contenedor de la imagen para el scroll
      img: document.getElementById('lightbox-img'),
      caption: document.getElementById('lightbox-caption'),
      thumbnails: document.getElementById('lightbox-thumbnails'),
      currentImageIndex: initialIndex,
      currentProjectImagesData: projectImages,
      currentProjectTitle: projectTitle,

      open(index) {
        if (!this.modal) return;
        this.modal.classList.remove('hidden');
        this.modal.classList.add('flex');
        this.imgContainer = this.img?.parentElement; // Asignar el contenedor de la imagen
        this.showImage(index);
        this.generateThumbnails();
      },

      close() {
        if (!this.modal) return;
        this.modal.classList.add('hidden');
        this.modal.classList.remove('flex');
      },

      showImage(index) {
        if (!this.img || !this.caption || !this.prevBtn || !this.nextBtn) return;
        this.currentImageIndex = index;
        const image = this.currentProjectImagesData[index];
        this.img.src = image.src.src; // Acceder a la propiedad .src del objeto ImageMetadata
        this.caption.textContent = `${this.currentProjectTitle} - ${image.caption}`;
        this.prevBtn.style.display = index > 0 ? 'block' : 'none';
        this.nextBtn.style.display = index < this.currentProjectImagesData.length - 1 ? 'block' : 'none';
        this.updateActiveThumbnail();
      },

      navigate(direction) {
        const newIndex = direction === 'prev' ? this.currentImageIndex - 1 : this.currentImageIndex + 1;
        if (newIndex >= 0 && newIndex < this.currentProjectImagesData.length) {
          this.showImage(newIndex);
        }
      },

      generateThumbnails() {
        if (!this.thumbnails) return;
        this.thumbnails.innerHTML = '';
        this.currentProjectImagesData.forEach((image, idx) => {
          const thumbnailContainer = document.createElement('div');
          thumbnailContainer.classList.add('h-24', 'w-24', 'flex-shrink-0'); // Contenedor para la imagen
          
          const thumbnailImage = document.createElement('img'); // Usar <img> directamente para las miniaturas
          thumbnailImage.src = image.src.src; // Acceder a la propiedad .src del objeto ImageMetadata
          thumbnailImage.alt = image.caption;
          thumbnailImage.classList.add('h-full', 'w-full', 'object-cover', 'cursor-pointer', 'border-2', 'border-transparent', 'hover:border-secondary', 'transition-all', 'duration-200');
          thumbnailImage.setAttribute('loading', 'lazy');
          thumbnailImage.setAttribute('width', '96');
          thumbnailImage.setAttribute('height', '96');
          thumbnailImage.addEventListener('click', () => this.showImage(idx));
          
          thumbnailContainer.appendChild(thumbnailImage);
          this.thumbnails?.appendChild(thumbnailContainer);
        });
      },

      updateActiveThumbnail() {
        if (!this.thumbnails) return;
        Array.from(this.thumbnails.children).forEach((thumbnail, idx) => {
          if (idx === this.currentImageIndex) {
            thumbnail.classList.add('border-secondary');
          } else {
            thumbnail.classList.remove('border-secondary');
          }
        });
      },

      init() {
        this.closeBtn?.addEventListener('click', () => this.close());
        this.prevBtn?.addEventListener('click', () => this.navigate('prev'));
        this.nextBtn?.addEventListener('click', () => this.navigate('next'));
        this.modal?.addEventListener('click', (event) => {
          if (event.target === this.modal) this.close();
        });
        document.addEventListener('keydown', (event) => {
          if (this.modal && !this.modal.classList.contains('hidden')) {
            if (event.key === 'Escape') this.close();
            if (event.key === 'ArrowLeft') this.navigate('prev');
            if (event.key === 'ArrowRight') this.navigate('next');
          }
        });
      }
    };

    lightbox.init();

    // Expose openLightbox to global scope for inline onclick
    if (typeof window !== 'undefined') {
      (window).myProjectScripts = (window).myProjectScripts || {};
      (window).myProjectScripts.openLightbox = (initialIndex, images, title) => {
        lightbox.currentProjectImagesData = images;
        lightbox.currentProjectTitle = title;
        lightbox.open(initialIndex);
      };
    }
  });
</script>
