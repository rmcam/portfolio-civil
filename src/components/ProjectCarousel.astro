---
// Importación del icono de cámara para mostrar el número de imágenes en un proyecto
import CameraIcon from "./icons/Camera.astro";
// Importación del tipo Project para asegurar la estructura de los datos de los proyectos
import type { Project } from "../data/projects";
// Importación del componente de galería Lightbox
import LightboxGallery from "./LightboxGallery.astro";
import { Image } from 'astro:assets'; // Importar el componente Image de Astro

// Definición de las propiedades (props) que acepta el componente ProjectCarousel
interface Props {
  projects: Project[]; // Array de objetos Project a mostrar en el carrusel
  class?: string; // Clases CSS adicionales para el contenedor principal del carrusel
}

// Desestructuración de las props de Astro
const { projects, class: className } = Astro.props;
---

<!--
  Componente ProjectCarousel: Muestra una lista de proyectos en un formato de carrusel.
  Incluye navegación con flechas (escritorio) y soporte para swipe (móvil).
  La funcionalidad de lightbox para ver las imágenes de cada proyecto en detalle
  es proporcionada por el componente LightboxGallery.
-->
<div class={`relative w-full overflow-hidden ${className}`}>
  <!-- Contenedor de los elementos del carrusel -->
  <div
    class="flex transition-transform duration-500 ease-in-out items-stretch justify-start gap-x-4"
    id="project-carousel-container"
    data-projects-length={projects.length}
  >
    <!-- Mapeo de cada proyecto a una tarjeta individual en el carrusel -->
    {projects.map((project: Project, projectIndex: number) => (
      <div class="flex-shrink-0 w-full md:w-1/2 lg:w-1/3 px-2 group">
        <article class="bg-white shadow-lg rounded-lg p-6 flex flex-col space-y-4 h-full transform transition-transform duration-300 ease-in-out">
          <!-- Área de la imagen principal del proyecto con funcionalidad de lightbox -->
          <div class="relative aspect-square overflow-hidden rounded-lg cursor-pointer"
               onclick={`window.myProjectScripts.openLightbox(${projectIndex}, ${JSON.stringify(project.images)}, '${project.title.replace(/'/g, "\\'")}')`}>
            <Image
              src={project.images[0].src}
              alt={`${project.title} - Main Image`}
              width={400}
              height={400}
              quality={"high"}
              widths={[400, 768, 1024]}
              sizes="(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw"
              class="object-cover w-full h-full rounded-lg"
              loading="lazy"
              decoding="async"
            />
            <!-- Indicador del número de imágenes si hay más de una -->
            {project.images.length > 1 && (
              <div class="absolute bottom-2 right-2 flex items-center space-x-1 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded-md">
                <CameraIcon class="size-4" />
                <span>{project.images.length}</span>
              </div>
            )}
          </div>

          <!-- Contenido textual del proyecto -->
          <div class="flex-grow flex flex-col justify-between">
            <div>
              <h3 class="text-xl font-bold text-black mb-2 group-hover:text-red-700 transition-colors duration-300">
                {project.title}
              </h3>
              <!-- Lista de etiquetas (tags) del proyecto -->
              <div class="flex flex-wrap mb-2 gap-x-2">
                <ul class="flex flex-wrap gap-2">
                  {project.tags.map((tag) => (
                    <li>
                      <span class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2`}>
                        <tag.icon class="size-4" />
                        {tag.name}
                      </span>
                    </li>
                  ))}
                </ul>
              </div>
              <p class="text-gray-700 text-sm group-hover:text-gray-800 transition-colors duration-300">
                {project.description}
              </p>
            </div>
          </div>
        </article>
      </div>
    ))}
  </div>

  <!-- Flechas de navegación del carrusel (visibles solo en pantallas grandes) -->
  <button id="carousel-prev" class="absolute top-1/2 left-0 transform -translate-y-1/2 bg-gray-800 text-white p-2 rounded-full shadow-lg hover:bg-gray-700 focus:outline-none z-10 hidden lg:block">
    &#10094; <!-- Flecha izquierda -->
  </button>
  <button id="carousel-next" class="absolute top-1/2 right-0 transform -translate-y-1/2 bg-gray-800 text-white p-2 rounded-full shadow-lg hover:bg-gray-700 focus:outline-none z-10 hidden lg:block">
    &#10095; <!-- Flecha derecha -->
  </button>
</div>

<!-- Componente LightboxGallery para mostrar las imágenes de los proyectos -->
<LightboxGallery projectImages={[]} projectTitle="" />

<!-- Script JavaScript para la funcionalidad del carrusel -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Obtención de elementos del DOM para el carrusel
    const carouselContainer = document.getElementById('project-carousel-container');
    const prevBtn = document.getElementById('carousel-prev');
    const nextBtn = document.getElementById('carousel-next');
    
    if (!carouselContainer) return; // Salir si el contenedor del carrusel no existe

    // Número total de proyectos para el cálculo del carrusel
    const originalProjectsCount = parseInt(carouselContainer.dataset.projectsLength || '0');
    let currentIndex = 0; // Índice del proyecto actual en el carrusel
    let startX = 0; // Posición inicial del toque para el swipe
    let isSwiping = false; // Bandera para detectar si se está realizando un swipe

    /**
     * Determina cuántos elementos deben ser visibles por vista en el carrusel
     * basándose en el ancho de la ventana.
     */
    const getItemsPerView = () => {
      if (window.innerWidth >= 1024) return 3; // 3 elementos en pantallas grandes (lg)
      if (window.innerWidth >= 768) return 2; // 2 elementos en pantallas medianas (md)
      return 1; // 1 elemento en pantallas pequeñas
    };

    /**
     * Actualiza la posición del carrusel aplicando una transformación CSS.
     * @param smooth Indica si la transición debe ser suave (true por defecto).
     */
    const updateCarousel = (smooth = true) => {
      if (carouselContainer.children.length > 0) {
        const firstItem = carouselContainer.children[0];
        const itemWidth = firstItem.clientWidth;
        const gap = 16; // Corresponde a la clase Tailwind 'gap-x-4' (1rem = 16px)
        const totalItemWidth = itemWidth + gap;

        carouselContainer.style.transition = smooth ? 'transform 0.5s ease-in-out' : 'none';
        carouselContainer.style.transform = `translateX(-${currentIndex * totalItemWidth}px)`;
      }
    };

    /**
     * Maneja la navegación del carrusel (anterior/siguiente).
     * @param direction La dirección de navegación ('prev' o 'next').
     */
    const handleNavigation = (direction: 'prev' | 'next') => {
      const itemsPerView = getItemsPerView();
      // Calcula el índice máximo para evitar desbordamiento
      const maxIndex = Math.max(0, originalProjectsCount - itemsPerView);

      if (direction === 'prev') {
        currentIndex = Math.max(0, currentIndex - 1);
      } else {
        currentIndex = Math.min(maxIndex, currentIndex + 1);
      }
      updateCarousel(); // Actualiza la vista del carrusel
    };

    // Event listeners para los botones de navegación (escritorio)
    prevBtn?.addEventListener('click', () => handleNavigation('prev'));
    nextBtn?.addEventListener('click', () => handleNavigation('next'));

    // Event listeners para el swipe (móvil)
    carouselContainer.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
      isSwiping = true;
    });

    carouselContainer.addEventListener('touchmove', () => {
      if (!isSwiping) return;
      // Opcional: Añadir feedback visual durante el swipe, por ejemplo, ajustando temporalmente la transformación
      // const currentX = e.touches[0].clientX;
      // const diffX = startX - currentX;
      // carouselContainer.style.transform = `translateX(-${currentIndex * totalItemWidth + diffX}px)`;
    });

    carouselContainer.addEventListener('touchend', (e) => {
      if (!isSwiping) return;
      const endX = e.changedTouches[0].clientX;
      const diffX = startX - endX;
      const swipeThreshold = 50; // Píxeles para considerar un swipe

      if (diffX > swipeThreshold) {
        handleNavigation('next');
      } else if (diffX < -swipeThreshold) {
        handleNavigation('prev');
      }
      isSwiping = false;
    });

    /**
     * Maneja el evento de redimensionamiento de la ventana para ajustar el carrusel.
     */
    const handleResize = () => {
      const itemsPerView = getItemsPerView();
      const maxIndex = Math.max(0, originalProjectsCount - itemsPerView);
      if (currentIndex > maxIndex) {
        currentIndex = maxIndex; // Ajusta el índice si la vista cambia y el actual es inválido
      }
      updateCarousel(false); // Actualiza el carrusel sin transición suave al redimensionar
    };

    window.addEventListener('resize', handleResize);
    handleResize(); // Ejecutar al cargar para establecer la vista inicial
  });
</script>
