import { c as createComponent, d as createAstro, r as renderTemplate, l as defineScriptVars, f as addAttribute, m as maybeRenderHead } from './astro/server_Bi7tt4P9.mjs';
import 'kleur/colors';
import 'clsx';
/* empty css                               */

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$LightboxGallery = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$LightboxGallery;
  const { images, projectTitle } = Astro2.props;
  let gridClasses = "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8";
  if (images.length === 1) {
    gridClasses = "grid grid-cols-1";
  } else if (images.length === 2) {
    gridClasses = "grid grid-cols-1 md:grid-cols-2 gap-8";
  }
  return renderTemplate(_a || (_a = __template(["<!-- Lightbox Modal Structure -->", '<div id="lightbox-modal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black/90" data-astro-cid-kf5b72pp> <div class="relative w-full h-full flex flex-col bg-black" data-astro-cid-kf5b72pp> <!-- Controls --> <div class="absolute top-2 right-2 z-[60] flex items-center gap-2" data-astro-cid-kf5b72pp> <button id="lightbox-reset-btn" class="text-white text-2xl font-bold p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-75 focus:outline-none" title="Reset Zoom" data-astro-cid-kf5b72pp>\n&#x21BA; <!-- Reset icon --> </button> <button id="lightbox-close-btn" class="text-white text-4xl font-bold p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-75 focus:outline-none" data-astro-cid-kf5b72pp>\n&times;\n</button> </div> <!-- Image Viewport --> <div id="lightbox-img-container" class="relative flex-grow flex items-center justify-center w-full h-full overflow-hidden" data-astro-cid-kf5b72pp> <img id="lightbox-img" src="" alt="Project Image" class="max-w-full max-h-full object-contain flex-shrink-0" data-astro-cid-kf5b72pp> </div> <p id="lightbox-caption" class="text-center text-white text-lg mt-4" data-astro-cid-kf5b72pp></p> <!-- Navigation --> <button id="lightbox-prev-btn" class="absolute left-4 top-1/2 -translate-y-1/2 z-10 p-2 text-white text-4xl font-bold bg-black bg-opacity-50 rounded-full hover:bg-opacity-75 focus:outline-none" data-astro-cid-kf5b72pp>\n&#10094;\n</button> <button id="lightbox-next-btn" class="absolute right-4 top-1/2 -translate-y-1/2 z-10 p-2 text-white text-4xl font-bold bg-black bg-opacity-50 rounded-full hover:bg-opacity-75 focus:outline-none" data-astro-cid-kf5b72pp>\n&#10095;\n</button> </div> </div> <!-- Image Grid --> <div', " data-astro-cid-kf5b72pp> ", " </div> <script>(function(){", "\n  let currentImageIndex = 0;\n  const modal = document.getElementById('lightbox-modal');\n  const imgContainer = document.getElementById('lightbox-img-container');\n  const modalImg = document.getElementById('lightbox-img');\n  \n  // Zoom & Pan state\n  let scale = 1;\n  let panning = false;\n  let pointX = 0;\n  let pointY = 0;\n  let start = { x: 0, y: 0 };\n\n  function setTransform() {\n    modalImg.style.transform = `translate(${pointX}px, ${pointY}px) scale(${scale})`;\n  }\n\n  function resetTransform() {\n    scale = 1;\n    pointX = 0;\n    pointY = 0;\n    setTransform();\n  }\n\n  function showImageInLightbox(index) {\n    currentImageIndex = index;\n    modalImg.src = images[index].src;\n    resetTransform();\n\n    // Set the caption\n    const captionElement = document.getElementById('lightbox-caption');\n    if (captionElement) {\n      captionElement.textContent = images[index].caption;\n    }\n\n    const prevBtn = document.getElementById('lightbox-prev-btn');\n    const nextBtn = document.getElementById('lightbox-next-btn');\n    prevBtn.style.display = index > 0 ? 'block' : 'none';\n    nextBtn.style.display = index < images.length - 1 ? 'block' : 'none';\n  }\n\n  window.openLightbox = (index) => {\n    modal.classList.remove('hidden');\n    modal.classList.add('flex');\n    showImageInLightbox(index);\n  };\n\n  function closeLightbox() {\n    modal.classList.add('hidden');\n    modal.classList.remove('flex');\n    resetTransform();\n  }\n\n  function navigateLightbox(direction) {\n    if (direction === 'prev' && currentImageIndex > 0) {\n      showImageInLightbox(currentImageIndex - 1);\n    } else if (direction === 'next' && currentImageIndex < images.length - 1) {\n      showImageInLightbox(currentImageIndex + 1);\n    }\n  }\n  \n  // Event Listeners\n  imgContainer.addEventListener('mousedown', (e) => {\n    e.preventDefault();\n    panning = true;\n    modalImg.classList.add('panning');\n    start = { x: e.clientX - pointX, y: e.clientY - pointY };\n  });\n\n  imgContainer.addEventListener('mouseup', () => {\n    panning = false;\n    modalImg.classList.remove('panning');\n  });\n  \n  imgContainer.addEventListener('mouseleave', () => {\n    panning = false;\n    modalImg.classList.remove('panning');\n  });\n\n  imgContainer.addEventListener('mousemove', (e) => {\n    if (!panning) return;\n    e.preventDefault();\n    pointX = (e.clientX - start.x);\n    pointY = (e.clientY - start.y);\n    setTransform();\n  });\n\n  imgContainer.addEventListener('wheel', (e) => {\n    e.preventDefault();\n    const xs = (e.clientX - pointX) / scale;\n    const ys = (e.clientY - pointY) / scale;\n    const delta = -e.deltaY;\n    \n    (delta > 0) ? (scale *= 1.2) : (scale /= 1.2);\n    scale = Math.min(Math.max(1, scale), 10); // Clamp scale between 1 and 10\n\n    pointX = e.clientX - xs * scale;\n    pointY = e.clientY - ys * scale;\n\n    setTransform();\n  });\n\n  document.addEventListener('DOMContentLoaded', () => {\n    const closeBtn = document.getElementById('lightbox-close-btn');\n    const resetBtn = document.getElementById('lightbox-reset-btn');\n    const prevBtn = document.getElementById('lightbox-prev-btn');\n    const nextBtn = document.getElementById('lightbox-next-btn');\n\n    if (closeBtn) closeBtn.addEventListener('click', closeLightbox);\n    if (resetBtn) resetBtn.addEventListener('click', resetTransform);\n    if (prevBtn) prevBtn.addEventListener('click', () => navigateLightbox('prev'));\n    if (nextBtn) nextBtn.addEventListener('click', () => navigateLightbox('next'));\n    if (modal) modal.addEventListener('click', (event) => {\n      if (event.target === modal) {\n        closeLightbox();\n      }\n    });\n\n    document.addEventListener('keydown', (event) => {\n      if (!modal.classList.contains('hidden')) {\n        if (event.key === 'Escape') closeLightbox();\n        if (event.key === 'ArrowLeft') navigateLightbox('prev');\n        if (event.key === 'ArrowRight') navigateLightbox('next');\n      }\n    });\n  });\n})();<\/script>"], ["<!-- Lightbox Modal Structure -->", '<div id="lightbox-modal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black/90" data-astro-cid-kf5b72pp> <div class="relative w-full h-full flex flex-col bg-black" data-astro-cid-kf5b72pp> <!-- Controls --> <div class="absolute top-2 right-2 z-[60] flex items-center gap-2" data-astro-cid-kf5b72pp> <button id="lightbox-reset-btn" class="text-white text-2xl font-bold p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-75 focus:outline-none" title="Reset Zoom" data-astro-cid-kf5b72pp>\n&#x21BA; <!-- Reset icon --> </button> <button id="lightbox-close-btn" class="text-white text-4xl font-bold p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-75 focus:outline-none" data-astro-cid-kf5b72pp>\n&times;\n</button> </div> <!-- Image Viewport --> <div id="lightbox-img-container" class="relative flex-grow flex items-center justify-center w-full h-full overflow-hidden" data-astro-cid-kf5b72pp> <img id="lightbox-img" src="" alt="Project Image" class="max-w-full max-h-full object-contain flex-shrink-0" data-astro-cid-kf5b72pp> </div> <p id="lightbox-caption" class="text-center text-white text-lg mt-4" data-astro-cid-kf5b72pp></p> <!-- Navigation --> <button id="lightbox-prev-btn" class="absolute left-4 top-1/2 -translate-y-1/2 z-10 p-2 text-white text-4xl font-bold bg-black bg-opacity-50 rounded-full hover:bg-opacity-75 focus:outline-none" data-astro-cid-kf5b72pp>\n&#10094;\n</button> <button id="lightbox-next-btn" class="absolute right-4 top-1/2 -translate-y-1/2 z-10 p-2 text-white text-4xl font-bold bg-black bg-opacity-50 rounded-full hover:bg-opacity-75 focus:outline-none" data-astro-cid-kf5b72pp>\n&#10095;\n</button> </div> </div> <!-- Image Grid --> <div', " data-astro-cid-kf5b72pp> ", " </div> <script>(function(){", "\n  let currentImageIndex = 0;\n  const modal = document.getElementById('lightbox-modal');\n  const imgContainer = document.getElementById('lightbox-img-container');\n  const modalImg = document.getElementById('lightbox-img');\n  \n  // Zoom & Pan state\n  let scale = 1;\n  let panning = false;\n  let pointX = 0;\n  let pointY = 0;\n  let start = { x: 0, y: 0 };\n\n  function setTransform() {\n    modalImg.style.transform = \\`translate(\\${pointX}px, \\${pointY}px) scale(\\${scale})\\`;\n  }\n\n  function resetTransform() {\n    scale = 1;\n    pointX = 0;\n    pointY = 0;\n    setTransform();\n  }\n\n  function showImageInLightbox(index) {\n    currentImageIndex = index;\n    modalImg.src = images[index].src;\n    resetTransform();\n\n    // Set the caption\n    const captionElement = document.getElementById('lightbox-caption');\n    if (captionElement) {\n      captionElement.textContent = images[index].caption;\n    }\n\n    const prevBtn = document.getElementById('lightbox-prev-btn');\n    const nextBtn = document.getElementById('lightbox-next-btn');\n    prevBtn.style.display = index > 0 ? 'block' : 'none';\n    nextBtn.style.display = index < images.length - 1 ? 'block' : 'none';\n  }\n\n  window.openLightbox = (index) => {\n    modal.classList.remove('hidden');\n    modal.classList.add('flex');\n    showImageInLightbox(index);\n  };\n\n  function closeLightbox() {\n    modal.classList.add('hidden');\n    modal.classList.remove('flex');\n    resetTransform();\n  }\n\n  function navigateLightbox(direction) {\n    if (direction === 'prev' && currentImageIndex > 0) {\n      showImageInLightbox(currentImageIndex - 1);\n    } else if (direction === 'next' && currentImageIndex < images.length - 1) {\n      showImageInLightbox(currentImageIndex + 1);\n    }\n  }\n  \n  // Event Listeners\n  imgContainer.addEventListener('mousedown', (e) => {\n    e.preventDefault();\n    panning = true;\n    modalImg.classList.add('panning');\n    start = { x: e.clientX - pointX, y: e.clientY - pointY };\n  });\n\n  imgContainer.addEventListener('mouseup', () => {\n    panning = false;\n    modalImg.classList.remove('panning');\n  });\n  \n  imgContainer.addEventListener('mouseleave', () => {\n    panning = false;\n    modalImg.classList.remove('panning');\n  });\n\n  imgContainer.addEventListener('mousemove', (e) => {\n    if (!panning) return;\n    e.preventDefault();\n    pointX = (e.clientX - start.x);\n    pointY = (e.clientY - start.y);\n    setTransform();\n  });\n\n  imgContainer.addEventListener('wheel', (e) => {\n    e.preventDefault();\n    const xs = (e.clientX - pointX) / scale;\n    const ys = (e.clientY - pointY) / scale;\n    const delta = -e.deltaY;\n    \n    (delta > 0) ? (scale *= 1.2) : (scale /= 1.2);\n    scale = Math.min(Math.max(1, scale), 10); // Clamp scale between 1 and 10\n\n    pointX = e.clientX - xs * scale;\n    pointY = e.clientY - ys * scale;\n\n    setTransform();\n  });\n\n  document.addEventListener('DOMContentLoaded', () => {\n    const closeBtn = document.getElementById('lightbox-close-btn');\n    const resetBtn = document.getElementById('lightbox-reset-btn');\n    const prevBtn = document.getElementById('lightbox-prev-btn');\n    const nextBtn = document.getElementById('lightbox-next-btn');\n\n    if (closeBtn) closeBtn.addEventListener('click', closeLightbox);\n    if (resetBtn) resetBtn.addEventListener('click', resetTransform);\n    if (prevBtn) prevBtn.addEventListener('click', () => navigateLightbox('prev'));\n    if (nextBtn) nextBtn.addEventListener('click', () => navigateLightbox('next'));\n    if (modal) modal.addEventListener('click', (event) => {\n      if (event.target === modal) {\n        closeLightbox();\n      }\n    });\n\n    document.addEventListener('keydown', (event) => {\n      if (!modal.classList.contains('hidden')) {\n        if (event.key === 'Escape') closeLightbox();\n        if (event.key === 'ArrowLeft') navigateLightbox('prev');\n        if (event.key === 'ArrowRight') navigateLightbox('next');\n      }\n    });\n  });\n})();<\/script>"])), maybeRenderHead(), addAttribute([gridClasses], "class:list"), images.map((image, index) => renderTemplate`<div class="block group cursor-pointer"${addAttribute(`openLightbox(${index})`, "onclick")} data-astro-cid-kf5b72pp> <img${addAttribute(image.src, "src")}${addAttribute(image.caption, "alt")} class="w-full h-auto rounded-lg shadow-md border border-gray-700 group-hover:shadow-xl transition-shadow duration-300" data-astro-cid-kf5b72pp> <p class="text-center text-text-dark text-lg mt-2 flex items-center" data-astro-cid-kf5b72pp>${image.caption}</p> </div>`), defineScriptVars({ images }));
}, "C:/Users/rmcam/Documents/portfolio-civil/src/components/LightboxGallery.astro", void 0);

export { $$LightboxGallery as $ };
